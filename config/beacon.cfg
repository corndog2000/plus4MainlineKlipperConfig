[beacon]
serial: /dev/serial/by-id/usb-Beacon_Beacon_RevH_C6F9D4B25157355957202020FF0E3D10-if00
x_offset: 0
y_offset: 20
mesh_main_direction: x
mesh_runs: 2
contact_max_hotend_temperature: 350
home_xy_position: 152.5, 152.5      # update with your safe Z home position
home_z_hop: 5
home_z_hop_speed: 30
home_xy_move_speed: 300
home_y_before_x: False
home_method: proximity
home_method_when_homed: proximity
home_autocalibrate: never
home_gcode_pre_x: _BEACON_HOME_PRE_X
home_gcode_post_x: _BEACON_HOME_POST_X
home_gcode_pre_y: _BEACON_HOME_PRE_Y
home_gcode_post_y: _BEACON_HOME_POST_Y
contact_activate_gcode: _BEACON_CONTACT_PRE_Z
contact_deactivate_gcode: _BEACON_CONTACT_POST_Z
contact_sensitivity: 0         # You can try the default of 0, but if your
                                # automatic Z is too high, then put back to 1
contact_latency_min: 0          # You can try the default of 0, but if your
                                # automatic Z is high, put back to 2, 3 or 4
autocal_tolerance: 0.006

[gcode_macro M4027]
gcode:
    { action_respond_info("M4027 called")  }
    G32                                     # Set bed meshing to default profile
    G29                                     # Do full homing, z-tilt, and bed meshing
    G31                                     # Set bed meshing back to kamp profile
    M400                                    # Wait for all outstanding G-code moves to finish
    M118 Bed mesh calibrate complete        # Tell xindi we're done
    SAVE_CONFIG

[gcode_macro _APPLY_NOZZLE_OFFSET]
description: Determine the global nozzle offset and apply based on printing temperature
variable_hotend_temp: 250               # Default target hotend temp (will be set by PRINT_START)
variable_probe_temp_delta: 80           # We probe at this amount less than the hotend temp
variable_reference_position: 5.0        # A safe Z position at which we'll apply the offset change
variable_offset_correction: 0.07        # Base offset correction factor
variable_temp_scaling_factor: 0.0005    # Additional scaling for higher temperatures
gcode:
    # Set our local working variables
    {% set reference_position = reference_position|float %}
    {% set offset_correction = offset_correction|float %}
    {% set current_temp = hotend_temp|float %}
    {% set base_temp = 200 %}  # Reference temperature for scaling

    # Calculate temperature-based compensation
    # More compensation at higher temperatures using non-linear scaling
    {% if current_temp > base_temp %}
        {% set temp_factor = (current_temp - base_temp) * temp_scaling_factor %}
        {% set adjusted_offset = offset_correction + temp_factor %}
    {% else %}
        {% set adjusted_offset = offset_correction %}
    {% endif %}

    # Determine the rest of our working variables
    {% set z_home_x = printer.configfile.settings.beacon.home_xy_position[0] %}
    {% set z_home_y = printer.configfile.settings.beacon.home_xy_position[1] %}
    {% set z_speed = printer.configfile.settings['stepper_z'].homing_speed|float * 60 %}
    
    {% set target_position = (reference_position + adjusted_offset)|float %}

    # Report to the console what we've determined
    { action_respond_info("Applying Z offset adjustment for hotend temperature of %.1fÂ°C" % current_temp) }
    { action_respond_info("  Base Offset Correction = %.3f" % (offset_correction)|float) }
    { action_respond_info("  Temp-Adjusted Offset  = %.3f" % (adjusted_offset)|float) }
    { action_respond_info("  Reference Position    = %.1f" % (reference_position)|float) }
    { action_respond_info("  Target Position       = %.6f" % (target_position)|float) }

    SET_GCODE_OFFSET Z=0                            # Clear any pre-existing Gcode offsets
    G1 Z{target_position} F{z_speed}                # Move Z to determined target position
    G1 X{z_home_x} Y{z_home_y} F7200                # Move X/Y to Z homing position 
    M400                                            # Wait for prior gcode-commands to finish
    SET_KINEMATIC_POSITION Z={reference_position}   # Set target position to be the reference position
    G1 Z{reference_position} F600                   # Move Z to reference position
    M400

[gcode_macro APPLY_TEMP_COMPENSATION]
description: Apply temperature-based Z-offset compensation based on current print temperature
gcode:
    {% set current_temp = printer.extruder.target %}
    # Only apply temperature compensation if we have a target temperature
    {% if current_temp > 170 %}
        _APPLY_NOZZLE_OFFSET TEMP={current_temp}
    {% endif %}

[gcode_macro _SETTLE_PRINT_BED]
gcode:
    G1 Z4 F600                              # Move to Z=4
    G91                                     # Enter relative positioning mode
    M400                                    # Wait for all prior commands to finish
    {% for z in range(50) %}                # Loop 50 times
        G1 Z1 F5000                         # Move bed down by 1mm
        G1 Z-1 F5000                        # Move bed up by 1mm
    {% endfor %}
    G90                                     # Go back to absolute positioning mode
    M400                                    # Wait for all prior commands to finish
    G1 Z4 F600                              # Make sure Z=4mm before we leave the macro

[gcode_macro _FIND_Z_EQUALS_ZERO]
gcode:
    {% set hotend_temp = (printer["gcode_macro _APPLY_NOZZLE_OFFSET"].hotend_temp)|float %}
    {% set probe_temp_delta = (printer["gcode_macro _APPLY_NOZZLE_OFFSET"].probe_temp_delta)|float %}

    {% set z_home_temp = hotend_temp - probe_temp_delta %}
    {% set z_home_x = printer.configfile.settings.beacon.home_xy_position[0] %}
    {% set z_home_y = printer.configfile.settings.beacon.home_xy_position[1] %}

    M104 S{z_home_temp}                     # Commence nozzle warmup for z homing        
    BED_MESH_CLEAR                          # Clear out any existing bed meshing context
    SET_KINEMATIC_POSITION Z=0              # Force firmware to believe Z is homed at 0
    G1 Z3 F600                              # Move bed away from the nozzle by 3mm from where it was
    SET_KINEMATIC_POSITION CLEAR=XYZ        # Ensure all kinematic repositionings are cleared
    SET_GCODE_OFFSET Z=0                    # Comnpletely reset all prior notions of Z offset
    G28 X Y                                 # Home X and Y Axes
    {% if (printer.configfile.settings['beacon model default'] is defined) %}
        G28 Z METHOD=proximity              # Do a rapid proximity based Z home if possible
    {% else %}
        M109 S{z_home_temp}                 # Wait for nozzle to fully heat up
        G28 Z METHOD=CONTACT CALIBRATE=0    # Home Z axis without calibration
    {% endif %}
    _SETTLE_PRINT_BED                        # Try to settle the build plate
    M109 S{z_home_temp}                     # Wait for nozzle to fully reach Z probing temperature
    G28 Z METHOD=CONTACT CALIBRATE=1        # Home Z axis, and calibrate beacon                                     
    Z_TILT_ADJUST                           # Ensure bed is level
    G1 X{z_home_x} Y{z_home_y} F7200        # Move to Z home position
    G4 P15000                               # Heatsoak hotend for 15s more
    G28 Z METHOD=CONTACT CALIBRATE=1        # Establish Z=0
    G1 Z3 F600                              # Move bed away from the nozzle by 3mm from where it was
    _APPLY_NOZZLE_OFFSET

[gcode_macro APPLY_FILAMENT_OFFSET]
description: Apply a Z offset adjustment for a specific filament
gcode:
    {% set filament_z = params.Z|default(0)|float %}
    { action_respond_info("Setting Filament Offset to %.3fmm" % (filament_z)) }
    SET_GCODE_OFFSET Z_ADJUST={filament_z}

[gcode_macro G29]
variable_k:1
description: Prepare print bed, generate a bed mesh, and apply global Z nozzle offset
gcode:
    _FIND_Z_EQUALS_ZERO                                            # The user must make sure that nothing else homes Z after this call
    {% if k|int==1 %}
        BED_MESH_CALIBRATE RUNS=2 PROFILE=kamp
        BED_MESH_PROFILE LOAD=kamp
        SAVE_VARIABLE VARIABLE=profile_name VALUE='"kamp"'
    {% else %}
        BED_MESH_CALIBRATE RUNS=2 PROFILE=default
        BED_MESH_PROFILE LOAD=default
        SAVE_VARIABLE VARIABLE=profile_name VALUE='"default"'
        SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1            # Reactivate KAMP/Adaptive mode for next time
    {% endif %}

# All the following zoffset calls only exist to keep Qidi's xindi happy
[gcode_macro zoffset]
description: Apply baseline Z offset which is always zero for Beacon Contact
gcode:
    SET_GCODE_OFFSET Z=0                    # Apply a zero gcode_offset

# Development test
[gcode_macro test_zoffset]
description: Debugging test to compare the probe contact and proximity Z Offset values
gcode:
    G28 X Y
    get_zoffset
    M400
    BEACON_OFFSET_COMPARE
    G4 P5000
    G1 Z10 F600

[gcode_macro get_zoffset]
description: Homes nozzle against build plate and applies global z offset
gcode:
    _FIND_Z_EQUALS_ZERO

[gcode_macro save_zoffset]
description: Use APPLY_FILAMENT_OFFSET instead
gcode:
    { action_respond_info("Use APPLY_FILAMENT_OFFSET instead") }

[gcode_macro set_zoffset]
description: Apply baseline Z offset which is always zero for Beacon Contact      
gcode: 
    SET_GCODE_OFFSET Z=0                    # Apply a zero gcode_offset

[gcode_macro _BEACON_HOME_PRE_X]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT * 0.6}

[gcode_macro _BEACON_HOME_POST_X]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    # Move away
    G1 X20 F9000
    M400
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT}

[gcode_macro _BEACON_HOME_PRE_Y]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT * 0.8}       

[gcode_macro _BEACON_HOME_POST_Y]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    # Move away
    G1 Y20 F9000
    M400
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT}

[gcode_macro _BEACON_CONTACT_PRE_Z]
gcode:

[gcode_macro _BEACON_CONTACT_POST_Z]
gcode:
    G1 Z3 F600              # Ensure the bed is moved away from the nozzle
    M400

[gcode_macro SCREW_ADJUST_START]
gcode:
    _FIND_Z_EQUALS_ZERO
    M104 S0                 # Turn off hotend

[gcode_macro SFL]
description: Get zoffset at front-left bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw1[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw1[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x + 20} Y{screw_pos_y - beacon_off_y + 20} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro SFR]
description: Get zoffset at front-right bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw2[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw2[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x - 20} Y{screw_pos_y - beacon_off_y + 20} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro SBR]
description: Get zoffset at back-right bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw3[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw3[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x - 20} Y{screw_pos_y - beacon_off_y - 20} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro SBL]
description: Get zoffset at back-left bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw4[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw4[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x + 20} Y{screw_pos_y - beacon_off_y - 20} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro G32]
gcode:
    SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=0

[gcode_macro G31]
gcode:
    SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1

[gcode_macro BEACON_CALIBRATION]
gcode:
    G32
    G29
    G31
    SAVE_CONFIG