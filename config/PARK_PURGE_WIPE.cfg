[gcode_macro PURGE_VARIABLES]
description: Variables
variable_purge_spd:         400         # Speed, in mm/min, of the purge
variable_purge_temp_min:    200         # Minimum nozzle purge temperature
variable_purge_x:            95         # From the nozzle to the left of your toolhead
variable_purge_y:           324         # From the nozzle to the front of your toolhead
variable_purge_x_entry:      56         # x entry location before going to the purge location
variable_purge_y_entry:     310         # y entry location before going to the purge location
variable_z_min:              40         # minimum height of Z during park
variable_travel_speed:      300         # how fast travel speeds will be performed
variable_entry_speed:        50         # how fast to move from the entry location to the purge location
variable_z_lift:              2         # amount to Z hop during park
variable_wipe_qty:            2         # Number of complete (A complete wipe: left, right, left OR right, left, right) wipes
variable_travel_spd_xy:   18000         # Travel (not cleaning) speed along x and y-axis in mm/min.
variable_travel_spd_z:     1000         # Travel (not cleaning) speed along z axis in mm/min
variable_wipe_spd_xy:      6000         # Nozzle wipe speed in mm/min
variable_brush_accel:      4000         #The acceleration to use when using the brush action
variable_purge_fan_speed:   0.4         # Part cooling fan speed during purge
variable_wipe_fan_speed:    0.8         # Part cooling fan speed during wipe
# These parameters define the size of the brush. Update as necessary. A visual reference
# is provided below.
#
#                  ←   brush_width   →
#                   _________________
#                  |                 |  ↑                Y position is acquired from your
#  brush_start (x) |                 | brush_depth       stepper_y position_max. Adjust
#                  |_________________|  ↓                your brush physically in Y so
#                          (y)                           that the nozzle scrubs within the
#                      brush_front                       brush.
# __________________________________________________________
#                     PRINTER FRONT
#
#
 
variable_brush_start: 78        # Start location of the brush
variable_brush_width: -20       # width of the brush

# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Decr. z_raise_exp          |
# |                                     | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. z_raise_exp          |
# |         later iterations            |     (Not above 1)          |
# +-------------------------------------+----------------------------+
#



# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time: 1000

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan: -1         # Leave it unchanged
#variable_part_cooling_fan:  0         # Disable the fan
variable_part_cooling_fan: 1           # Run it at full speed


# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 30

# The maximum amount of filament (in mm¹) to purge in a single blob. PURGE will 
# automatically purge multiple blobs if the purge amount exeeds this.
variable_purge_length_maximum: 60

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 40

# The slicer values often are a bit too wastefull. Tune it here to get optimal values. 
# 0.6 (60%) is a good starting point.
variable_purge_length_modifier: 0

# Fixed length of filament to add after the purge volume calculation. Happy Hare already
# shares info on the extra amount of filament to purge based on known residual filament,
# tip cutting fragment and initial retraction setting. However this setting can add a fixed
# amount on top on that if necessary although it is recommended to start with 0 and tune
# slicer purge matrix first.
# When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 0
gcode: #leave blank


[gcode_macro BUCKET_PURGE]
gcode:
  {% set vars = printer['gcode_macro PURGE_VARIABLES'] %}
# ======================================================================================
# ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
# ======================================================================================

# General state
    SAVE_GCODE_STATE NAME=BUCKET_PURGE_state

  
# ======================================================================================
# ==================== CHECK HOMING STATUS =============================================
# ======================================================================================
  
    {% if "xyz" not in printer.toolhead.homed_axes %}
        RESPOND MSG="PURGE: Not homed! Home xyz before purging"
    {% else %}
    


        # Set feedrate to 100% for correct speed purging
        {% set backup_feedrate = printer.gcode_move.speed_factor %}
        M220 S100

# ======================================================================================
# ==================== DEFINE BASIC VARIABLES ==========================================
# ======================================================================================
    
        {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
        {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
        {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
        {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
        {% set from_tool = printer.mmu.last_tool %}
        {% set to_tool = printer.mmu.tool %}
        {% set pos = printer.gcode_move.gcode_position %}
        {% set pos_max = printer.toolhead.axis_maximum %}
        {% set backup_fan_speed = printer["fan_generic part_fan"].speed %}
        # Get purge volumes from the slicer (if set up right. see 
        # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
        {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}

# ======================================================================================
# ==================== DETERMINE PURGE LENGTH ==========================================
# ======================================================================================

        {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
            {action_respond_info("PURGE: param PURGE_LENGTH provided")}
            {% set purge_len = params.PURGE_LENGTH|float %}
        {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
            {action_respond_info("PURGE: Tool didn't change (T%s > T%s), %s" % (from_tool, to_tool, "priming" if vars.purge_length_minimum else "skipping"))}
            {% set purge_len = 0 %}

        {% elif pv %} # ============== FETCH FROM HAPPY HARE (LIKELY FROM SLICER) ==============
            {% if from_tool < 0 and to_tool >= 0%}
                {action_respond_info("PURGE: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
                {% set purge_vol = pv|map(attribute=to_tool)|max %}
            {% elif to_tool < 0 %}
                {action_respond_info("PURGE: tool(s) unknown. Finding largest value")}
                {% set purge_vol = pv|map('max')|max %}
            {% else %}
                {% set purge_vol = pv[from_tool][to_tool]|float * vars.purge_length_modifier %}
                {action_respond_info("PURGE: Swapped T%s > T%s" % (from_tool, to_tool))}
            {% endif %}
        
            {% set purge_len = purge_vol / filament_cross_section %}

            {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + park_vars.retracted_length + vars.purge_length_addition %}

        {% else %} # ========================= USE CONFIG VARIABLE =============================
            {action_respond_info("PURGE: No toolmap or PURGE_LENGTH. Using default")}
            {% set purge_len = vars.purge_length|float + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
        {% endif %}
# ==================================== APPLY PURGE MINIMUM =============================
        {% if purge_len < vars.purge_length_minimum %}
          {action_respond_info("PURGE: Purge length too short, using minimum")}
        {% endif %}  
        {% set purge_len = [purge_len,vars.purge_length_minimum]|max|round(0, 'ceil')|int %}
        {action_respond_info("PURGE: Purging %dmm of filament" % (purge_len))}

        {% if purge_len|float > 0 %}
            {% if not (printer.toolhead.position.x == vars.purge_x and printer.toolhead.position.y == vars.purge_y) %}
                PURGE_PARK
            {% endif%}

# ====================================================================================
# ==================== HEAT HOTEND ===================================================
# ====================================================================================
      
            {% if printer.extruder.temperature < vars.purge_temp_min - 2 %}
              RESPOND MSG="PURGE: Heating Extruder to MIN"
                {% if printer.extruder.target < vars.purge_temp_min %}
                    M109 S{vars.purge_temp_min}
                {% else %}
                    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={vars.purge_temp_min}
                {% endif %}
            {% endif %}

# ====================================================================================
# ==================== START ITERATING ===============================================
# ====================================================================================
      
            # Calculate total number of iterations based on the purge length and the max_iteration length.
            {% set blobs = (purge_len / vars.purge_length_maximum)|round(0, 'ceil')|int %}
            {% set purge_per_blob = purge_len|float / blobs %}
            {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
            {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
            {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
            {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
            {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}


            # Repeat the process until purge_len is reached
            {% for blob in range(blobs) %}
                RESPOND MSG={"'PURGE: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}



                # relative positioning
                G91 
                # relative extrusion
                M83
                # set fan speed for purge
                
                M106 P0 S{(vars.purge_fan_speed * 255)|int}
                
                # Purge filament in a pulsating motion to purge the filament quicker and better
                {% for pulse in range(pulses_per_blob) %}
                    # Calculations to determine z-speed
                    {% set purged_this_blob = pulse * purge_per_pulse %}
                    {% set speed = vars.purge_spd %}

                    # Purge quickly
                    G1 E{purge_per_pulse * 0.95} F{speed}
                    # Purge a tiny bit slowly
                    G1 E{purge_per_pulse * 0.05} F{speed}

                    # retract and unretract filament every now and then for thourough cleaning
                    {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
                        G1 E-2 F1800
                        G1 E2 F800
                    {% endif %}
                {% endfor %}

                # Retract to match what Happy Hare is expecting
                G1 E-{park_vars.retracted_length} F{sequence_vars.retract_speed * 60}

                        
                    # ==================================================================================
                    # ==================== DEPOSIT BLOB ================================================
                    # ==================================================================================

                    G4 P{vars.pressure_release_time}
                    M106 P0 S{(backup_fan_speed * 255)|int}
                    PURGE_WIPE
                    
            {% endfor %}
        {% endif %} 
    

    
            M220 S{(backup_feedrate * 100)|int}
    {% endif %}
  
    RESTORE_GCODE_STATE NAME=BUCKET_PURGE_state

[gcode_macro PURGE_WIPE]
gcode:
  {% set vars = printer['gcode_macro PURGE_VARIABLES'] %}
  {% set original_accel = printer.toolhead.max_accel %}
  {% set original_minimum_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
  {% set backup_fan_speed = printer["fan_generic part_fan"].speed %}
  
    SAVE_GCODE_STATE NAME=PURGE_WIPE_state

    {% if not (printer.toolhead.position.x == vars.purge_x and printer.toolhead.position.y == vars.purge_y) %}
        PURGE_PARK
    {% endif%}
    G90
    M106 P0 S{(vars.wipe_fan_speed * 255)|int}
    {% if vars.brush_accel > 0 %}
        SET_VELOCITY_LIMIT ACCEL={vars.brush_accel} MINIMUM_CRUISE_RATIO=0.1
    {% endif %}

    G1 X{vars.brush_start} F{vars.travel_spd_xy}
  
    SET_VELOCITY_LIMIT ACCEL={original_accel} MINIMUM_CRUISE_RATIO={original_minimum_cruise_ratio}
  
    # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
    {% for wipes in range(1, (vars.wipe_qty + 1)) %}
        G1 X{vars.brush_start + vars.brush_width} F{vars.wipe_spd_xy}
        G1 X{vars.brush_start} F{vars.wipe_spd_xy}
    {% endfor %}
    M106 P0 S{(backup_fan_speed * 255)|int}
    RESTORE_GCODE_STATE NAME=PURGE_WIPE_state

##########################################################################################
# Park the nozzle on the tray to prevent oozing during filament swaps. Place this 
# extension in the post_form_tip extension in mmu_macro_vars.cfg:
# variable_user_post_form_tip_extension: "PURGE_PARK"
#
[gcode_macro PURGE_PARK]
gcode:
    {% set Px = printer["gcode_macro PURGE_VARIABLES"].purge_x|float %}
    {% set Py = printer["gcode_macro PURGE_VARIABLES"].purge_y|float %}
    {% set Pxe = printer["gcode_macro PURGE_VARIABLES"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro PURGE_VARIABLES"].purge_y_entry|float %}
    {% set St = printer["gcode_macro PURGE_VARIABLES"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro PURGE_VARIABLES"].entry_speed * 60 %}
    {% set max_z = printer.configfile.config.stepper_z.position_max|float%}
    {% set cur_z = printer.gcode_move.gcode_position.z|float %}
    {% set z_min = printer["gcode_macro PURGE_VARIABLES"].z_min|float %}    
    {% set z_lift = printer["gcode_macro PURGE_VARIABLES"].z_lift|float %}
  
    SAVE_GCODE_STATE NAME=PURGE_PARK_state
  
    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}   
      {% set z_safe = [[cur_z + z_lift, z_min]|max, max_z]|min %}
        
        G90
        G1 Z{z_safe} F{St}
        G1 X{Pxe} Y{Pye} F{St}
        G4 P1000
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

    RESTORE_GCODE_STATE NAME=PURGE_PARK_state

[gcode_macro EXIT_PARK]
gcode:
    {% set Px = printer["gcode_macro PURGE_VARIABLES"].purge_x|float %}
    {% set Py = printer["gcode_macro PURGE_VARIABLES"].purge_y|float %}
    {% set Pxe = printer["gcode_macro PURGE_VARIABLES"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro PURGE_VARIABLES"].purge_y_entry|float %}
    {% set St = printer["gcode_macro PURGE_VARIABLES"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro PURGE_VARIABLES"].entry_speed * 60 %}
  
  
  
  {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
      G1 X{Px} Y{Py} F{Se}
  {% endif %}
  G1 X{Pxe} Y{Pye} F{Se}
